"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidDocument = void 0;
const did_1 = require("./did");
const service_1 = require("./service");
const verificationMethod_1 = require("./verificationMethod");
const schemas_1 = require("./schemas");
const error_1 = require("./error");
class DidDocument {
    constructor(options) {
        this.fullDocument = options;
        const parsed = schemas_1.didDocumentSchema.parse(options);
        this.id = parsed.id;
        this.alsoKnownAs = parsed.alsoKnownAs;
        this.controller = parsed.controller;
        this.verificationMethod = parsed.verificationMethod;
        this.authentication = parsed.authentication;
        this.assertionMethod = parsed.assertionMethod;
        this.keyAgreement = parsed.keyAgreement;
        this.capabilityDelegation = parsed.capabilityDelegation;
        this.capabilityInvocation = parsed.capabilityInvocation;
        this.service = parsed.service;
    }
    findVerificationMethodByDidUrl(didUrl) {
        var _a;
        const did = schemas_1.stringOrDid.parse(didUrl);
        const verificationMethod = (_a = this.verificationMethod) === null || _a === void 0 ? void 0 : _a.find((verificationMethod) => verificationMethod.id.didUrl === did.didUrl);
        if (!verificationMethod) {
            throw new error_1.DidDocumentError(`Verification method for did '${did.toString()}' not found`);
        }
        return verificationMethod;
    }
    safeFindToVerificationMethodByDidUrl(didUrl) {
        try {
            return this.findVerificationMethodByDidUrl(didUrl);
        }
        catch (_a) {
            return undefined;
        }
    }
    addAlsoKnownAs(alsoKnownAs) {
        if (this.alsoKnownAs) {
            this.alsoKnownAs.push(alsoKnownAs);
        }
        else {
            this.alsoKnownAs = [alsoKnownAs];
        }
        return this;
    }
    addController(controller, asArray = true) {
        const instancedController = typeof controller === 'string' ? new did_1.Did(controller) : controller;
        if (this.controller) {
            if (Array.isArray(this.controller)) {
                this.controller.push(instancedController);
            }
            else {
                this.controller = [this.controller, instancedController];
            }
        }
        else {
            this.controller = asArray
                ? [instancedController]
                : instancedController;
        }
        return this;
    }
    addVerificationMethod(verificationMethod) {
        if (this.verificationMethod) {
            this.verificationMethod.push(new verificationMethod_1.VerificationMethod(verificationMethod));
        }
        else {
            this.verificationMethod = [
                new verificationMethod_1.VerificationMethod(verificationMethod)
            ];
        }
        schemas_1.uniqueVerificationMethodsSchema.parse(this.verificationMethod);
        return this;
    }
    addAuthentication(verificationMethodOrDidOrString) {
        this.authentication = this.addVerificationMethodOrDidOrString('authentication', this.authentication, verificationMethodOrDidOrString);
        return this;
    }
    addAuthenticationUnsafe(verificationMethodOrDidOrString) {
        this.authentication = this.addVerificationMethodOrDidOrString('authentication', this.authentication, verificationMethodOrDidOrString, true);
        return this;
    }
    addKeyAgreement(verificationMethodOrStringOrDid) {
        this.keyAgreement = this.addVerificationMethodOrDidOrString('keyAgreement', this.keyAgreement, verificationMethodOrStringOrDid);
        return this;
    }
    addKeyAgreementUnsafe(verificationMethodOrStringOrDid) {
        this.keyAgreement = this.addVerificationMethodOrDidOrString('keyAgreement', this.keyAgreement, verificationMethodOrStringOrDid, true);
        return this;
    }
    addAssertionMethod(verificationMethodOrStringOrDid) {
        this.assertionMethod = this.addVerificationMethodOrDidOrString('assertionMethod', this.assertionMethod, verificationMethodOrStringOrDid);
        return this;
    }
    addAssertionMethodUnsafe(verificationMethodOrStringOrDid) {
        this.assertionMethod = this.addVerificationMethodOrDidOrString('assertionMethod', this.assertionMethod, verificationMethodOrStringOrDid, true);
        return this;
    }
    addCapabilityDelegation(verificationMethodOrStringOrDid) {
        this.capabilityDelegation = this.addVerificationMethodOrDidOrString('capabilityDelegation', this.capabilityDelegation, verificationMethodOrStringOrDid);
        return this;
    }
    addCapabilityDelegationUnsafe(verificationMethodOrStringOrDid) {
        this.capabilityDelegation = this.addVerificationMethodOrDidOrString('capabilityDelegation', this.capabilityDelegation, verificationMethodOrStringOrDid, true);
        return this;
    }
    addCapabilityInvocation(verificationMethodOrStringOrDid) {
        this.capabilityInvocation = this.addVerificationMethodOrDidOrString('capabilityInvocation', this.capabilityInvocation, verificationMethodOrStringOrDid);
        return this;
    }
    addCapabilityInvocationUnsafe(verificationMethodOrStringOrDid) {
        this.capabilityInvocation = this.addVerificationMethodOrDidOrString('capabilityInvocation', this.capabilityInvocation, verificationMethodOrStringOrDid, true);
        return this;
    }
    addService(service) {
        const instanceService = new service_1.Service(service);
        if (this.service) {
            this.service.push(instanceService);
        }
        else {
            this.service = [instanceService];
        }
        schemas_1.uniqueServicesSchema.parse(this.service);
        return this;
    }
    addVerificationMethodOrDidOrString(fieldName, previousItem, verificationMethodOrDidOrString, unsafe = false) {
        var _a;
        let newItem = previousItem;
        const id = verificationMethodOrDidOrString instanceof did_1.Did
            ? verificationMethodOrDidOrString
            : typeof verificationMethodOrDidOrString === 'string'
                ? new did_1.Did(verificationMethodOrDidOrString)
                : undefined;
        if (id && !unsafe) {
            const verificationMethodIds = (_a = this.verificationMethod) === null || _a === void 0 ? void 0 : _a.map((vm) => vm.id.didUrl);
            if (verificationMethodIds === undefined ||
                !verificationMethodIds.includes(id.didUrl)) {
                throw new error_1.DidDocumentError(`Tried to add '${id.didUrl}' to '${fieldName}', but it was not found in the verificationMethod. If you want to add it anyways, try 'this.add${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}Unsafe(...)'`);
            }
        }
        const vm = id === undefined
            ? verificationMethodOrDidOrString instanceof verificationMethod_1.VerificationMethod
                ? verificationMethodOrDidOrString
                : new verificationMethod_1.VerificationMethod(verificationMethodOrDidOrString)
            : undefined;
        const item = id !== null && id !== void 0 ? id : vm;
        if (item) {
            if (newItem) {
                newItem.push(item);
            }
            else {
                newItem = [item];
            }
        }
        else {
            throw new error_1.DidDocumentError(`Something went wrong while trying to parse verification method for ${fieldName} with item ${verificationMethodOrDidOrString}`);
        }
        (0, schemas_1.uniqueStringOrVerificationMethodsSchema)(fieldName).parse(newItem);
        return newItem;
    }
    findServiceByType(type) {
        var _a;
        const service = (_a = this.service) === null || _a === void 0 ? void 0 : _a.find((s) => (typeof s.type === 'string' ? [s.type] : s.type).includes(type));
        if (!service) {
            throw new error_1.DidDocumentError(`Service not found for type '${type}'`);
        }
        return service;
    }
    safeFindServiceByType(type) {
        try {
            return this.findServiceByType(type);
        }
        catch (_a) {
            return undefined;
        }
    }
    findServiceById(id) {
        var _a;
        const service = (_a = this.service) === null || _a === void 0 ? void 0 : _a.find((s) => s.id === id);
        if (!service) {
            throw new error_1.DidDocumentError(`Service not found with id '${id}'`);
        }
        return service;
    }
    safeFindServiceById(id) {
        try {
            return this.findServiceById(id);
        }
        catch (_a) {
            return undefined;
        }
    }
    findVerificationMethodByTypeAndPurpose(type, purpose = 'verificationMethod') {
        const field = purpose === 'authentication'
            ? this.authentication
            : purpose === 'keyAgreement'
                ? this.keyAgreement
                : purpose === 'assertionMethod'
                    ? this.assertionMethod
                    : purpose === 'capabilityInvocation'
                        ? this.capabilityInvocation
                        : purpose === 'capabilityDelegation'
                            ? this.capabilityInvocation
                            : this.verificationMethod;
        if (!field) {
            throw new error_1.DidDocumentError(`Purpose '${purpose}' does not exist inside the did document`);
        }
        const vm = field
            .map((f) => f instanceof did_1.Did
            ? this.safeFindToVerificationMethodByDidUrl(f)
            : f)
            .find((vm) => (vm === null || vm === void 0 ? void 0 : vm.type) === type);
        if (!vm) {
            throw new error_1.DidDocumentError(`Purpose '${purpose}' does not have a field with type '${type}'`);
        }
        return vm;
    }
    findVerificationMethodByDidUrlAndPurpose(did, purpose = 'verificationMethod') {
        const field = purpose === 'authentication'
            ? this.authentication
            : purpose === 'keyAgreement'
                ? this.keyAgreement
                : purpose === 'assertionMethod'
                    ? this.assertionMethod
                    : purpose === 'capabilityInvocation'
                        ? this.capabilityInvocation
                        : purpose === 'capabilityDelegation'
                            ? this.capabilityInvocation
                            : this.verificationMethod;
        const parsedDid = schemas_1.stringOrDid.parse(did);
        if (!field) {
            throw new error_1.DidDocumentError(`Purpose '${purpose}' does not exist inside the did document`);
        }
        const vm = field
            .map((f) => f instanceof did_1.Did
            ? this.safeFindToVerificationMethodByDidUrl(f)
            : f)
            .find((vm) => (vm === null || vm === void 0 ? void 0 : vm.id.didUrl) === parsedDid.didUrl);
        if (!vm) {
            throw new error_1.DidDocumentError(`Purpose '${purpose}' does not have a field with did '${did}'`);
        }
        return vm;
    }
    safeFindVerificationMethodByDidUrlAndPurpose(did, purpose = 'verificationMethod') {
        try {
            return this.findVerificationMethodByDidUrlAndPurpose(did, purpose);
        }
        catch (_a) {
            return undefined;
        }
    }
    safeFindVerificationMethodByTypeAndPurpose(type, purpose = 'verificationMethod') {
        try {
            return this.findVerificationMethodByTypeAndPurpose(type, purpose);
        }
        catch (_a) {
            return undefined;
        }
    }
    isVerificationMethodTypeRegistered(id, additionalAcceptedTypes = []) {
        const vm = this.findVerificationMethodByDidUrl(id);
        return vm.isTypeInDidSpecRegistry(additionalAcceptedTypes);
    }
    isServiceTypeRegistered(id, additionalAcceptedTypes = []) {
        const service = this.findServiceById(id);
        return service.isTypeInDidSpecRegistry(additionalAcceptedTypes);
    }
    toJSON(omitKeys) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const mapStringOrVerificationMethod = (i) => i.toJSON();
        const omitBase = ['fullDocument'];
        const omitKeysWithBase = omitKeys
            ? [...omitBase, ...omitKeys]
            : omitBase;
        const mappedRest = Object.assign(Object.assign({}, this.fullDocument), { id: this.id.did, alsoKnownAs: this.alsoKnownAs, controller: this.controller && this.controller instanceof did_1.Did
                ? (_a = this.controller) === null || _a === void 0 ? void 0 : _a.did
                : (_b = this.controller) === null || _b === void 0 ? void 0 : _b.map((c) => c.did), verificationMethod: (_c = this.verificationMethod) === null || _c === void 0 ? void 0 : _c.map((v) => v.toJSON()), service: (_d = this.service) === null || _d === void 0 ? void 0 : _d.map((s) => s.toJSON()), assertionMethod: (_e = this.assertionMethod) === null || _e === void 0 ? void 0 : _e.map(mapStringOrVerificationMethod), keyAgreement: (_f = this.keyAgreement) === null || _f === void 0 ? void 0 : _f.map(mapStringOrVerificationMethod), capabilityInvocation: (_g = this.capabilityInvocation) === null || _g === void 0 ? void 0 : _g.map(mapStringOrVerificationMethod), capabilityDelegation: (_h = this.capabilityDelegation) === null || _h === void 0 ? void 0 : _h.map(mapStringOrVerificationMethod), authentication: (_j = this.authentication) === null || _j === void 0 ? void 0 : _j.map(mapStringOrVerificationMethod) });
        const cleanedRest = Object.fromEntries(Object.entries(mappedRest)
            .filter(([_, value]) => value !== undefined)
            .filter(([key]) => !omitKeysWithBase.includes(key)));
        return cleanedRest;
    }
}
exports.DidDocument = DidDocument;
//# sourceMappingURL=didDocument.js.map