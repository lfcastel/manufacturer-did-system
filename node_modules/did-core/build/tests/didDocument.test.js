"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_test_1 = require("node:test");
const didDocuments_1 = require("./fixtures/didDocuments");
const node_assert_1 = __importDefault(require("node:assert"));
const createDidDocumentConstructTest_1 = require("./utils/createDidDocumentConstructTest");
const src_1 = require("../src");
const zod_1 = require("zod");
(0, node_test_1.describe)('Did Document', () => {
    didDocuments_1.DID_DOCUMENTS.map(createDidDocumentConstructTest_1.createDidDocumentConstructTest);
    (0, node_test_1.describe)('Create did document with builder', () => {
        (0, node_test_1.it)('should create basic did document with the builder', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123' });
            node_assert_1.default.deepStrictEqual(doc.toJSON(), { id: 'did:example:123' });
        });
        (0, node_test_1.it)('should strip URL parts on `id` field', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123#key-01' });
            node_assert_1.default.deepStrictEqual(doc.toJSON(), { id: 'did:example:123' });
        });
        (0, node_test_1.it)('should show undefined properties', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                someField: 'a'
            });
            node_assert_1.default.deepStrictEqual(doc.toJSON(), {
                id: 'did:example:123',
                someField: 'a'
            });
        });
        (0, node_test_1.it)('should not show undefined properties, if specified inside the toJSON method', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                someField: 'a'
            });
            node_assert_1.default.deepStrictEqual(doc.toJSON(['someField']), {
                id: 'did:example:123'
            });
        });
        (0, node_test_1.it)('should error when providing a DID URL for the `controller` field', () => {
            node_assert_1.default.throws(() => new src_1.DidDocument({
                id: 'did:example:123',
                controller: 'did:key:abc/path'
            }), zod_1.ZodError);
        });
        (0, node_test_1.it)('should error when providing both a `publicKeyJwk` and `publicKeyMultibase` in a verification method', () => {
            node_assert_1.default.throws(() => new src_1.DidDocument({
                id: 'did:example:123',
                verificationMethod: [
                    {
                        id: 'did:some:id',
                        type: 'verification',
                        controller: 'did:example:123',
                        publicKeyJwk: { kty: 'keyType' },
                        publicKeyMultibase: 'someMultibase'
                    }
                ]
            }), zod_1.ZodError);
        });
        (0, node_test_1.it)('should create a more complex did document with the builder', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123' })
                .addService({
                id: 'some:uri',
                type: ['a', 'b'],
                serviceEndpoint: [
                    'https://google.com',
                    'https://github.com'
                ]
            })
                .addVerificationMethod({
                id: new src_1.Did('did:example:123'),
                type: 'some-type',
                controller: 'did:example:123',
                publicKeyJwk: { kty: 'a' }
            })
                .addController(new src_1.Did('did:example:123'), true)
                .addAlsoKnownAs('AKA')
                .addKeyAgreementUnsafe(new src_1.Did('did:foo:bar'))
                .addAssertionMethod('did:example:123')
                .addAuthentication({
                controller: 'did:me:123',
                type: 'again-some-other-type',
                id: 'did:cheese:bar'
            })
                .addCapabilityDelegation(new src_1.VerificationMethod({
                id: 'did:some:id',
                type: 'some-type',
                controller: 'did:me:duh'
            }))
                .addCapabilityInvocationUnsafe('did:me:duh')
                .addAssertionMethod({
                id: 'did:key:foobar',
                type: 'a',
                controller: 'did:example:123'
            });
            node_assert_1.default.deepStrictEqual(doc.toJSON(), {
                id: 'did:example:123',
                alsoKnownAs: ['AKA'],
                controller: ['did:example:123'],
                authentication: [
                    {
                        controller: 'did:me:123',
                        type: 'again-some-other-type',
                        id: 'did:cheese:bar'
                    }
                ],
                verificationMethod: [
                    {
                        id: 'did:example:123',
                        type: 'some-type',
                        controller: 'did:example:123',
                        publicKeyJwk: { kty: 'a' }
                    }
                ],
                assertionMethod: [
                    'did:example:123',
                    {
                        id: 'did:key:foobar',
                        type: 'a',
                        controller: 'did:example:123'
                    }
                ],
                keyAgreement: ['did:foo:bar'],
                capabilityInvocation: ['did:me:duh'],
                capabilityDelegation: [
                    {
                        id: 'did:some:id',
                        type: 'some-type',
                        controller: 'did:me:duh'
                    }
                ],
                service: [
                    {
                        id: 'some:uri',
                        type: ['a', 'b'],
                        serviceEndpoint: [
                            'https://google.com',
                            'https://github.com'
                        ]
                    }
                ]
            });
        });
        (0, node_test_1.it)('should error with duplicate ID in service', () => {
            node_assert_1.default.throws(() => new src_1.DidDocument({ id: 'did:foo:bar' })
                .addService({
                id: 'some:id',
                type: 'some-type',
                serviceEndpoint: 'https://github.com'
            })
                .addService({
                id: 'some:id',
                type: 'some-type',
                serviceEndpoint: 'https://github.com'
            }), zod_1.ZodError);
        });
        (0, node_test_1.it)('should error with duplicate ID in verificationMethod reference', () => {
            node_assert_1.default.throws(() => new src_1.DidDocument({ id: 'did:foo:bar' })
                .addAuthentication({
                id: 'did:url:ref#1',
                type: 'some-type',
                controller: 'did:foo:bar'
            })
                .addAuthentication({
                id: 'did:url:ref#1',
                type: 'some-type',
                controller: 'did:foo:bar'
            }), zod_1.ZodError);
        });
        (0, node_test_1.it)('should error when the verification method reference is not inside the verification method', () => {
            node_assert_1.default.throws(() => new src_1.DidDocument({ id: 'did:foo:bar' }).addAuthentication('did:example:key#01'), src_1.DidDocumentError);
        });
        (0, node_test_1.it)('should not error when the verification method reference is not inside the verification method, but using unsafe', () => {
            const doc = new src_1.DidDocument({
                id: 'did:foo:bar'
            }).addAuthenticationUnsafe('did:example:key#01');
            node_assert_1.default.deepStrictEqual(doc.toJSON(), {
                id: 'did:foo:bar',
                authentication: ['did:example:key#01']
            });
        });
    });
    (0, node_test_1.describe)('Dereferencing to verification method', () => {
        (0, node_test_1.it)('should find correctly to the associated verification method', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:bar'
            }).addVerificationMethod({
                id: 'did:example:bar#01',
                type: 'some-type',
                controller: 'did:example:bar',
                publicKeyJwk: { kty: 'some-kty' }
            });
            node_assert_1.default.deepStrictEqual(doc
                .findVerificationMethodByDidUrl('did:example:bar#01')
                .toJSON(), {
                id: 'did:example:bar#01',
                type: 'some-type',
                controller: 'did:example:bar',
                publicKeyJwk: { kty: 'some-kty' }
            });
        });
        (0, node_test_1.it)('should find safely to the associated verification method', () => {
            var _a;
            const doc = new src_1.DidDocument({
                id: 'did:example:bar'
            }).addVerificationMethod({
                id: 'did:example:bar#01',
                type: 'some-type',
                controller: 'did:example:bar',
                publicKeyJwk: { kty: 'some-kty' }
            });
            node_assert_1.default.deepStrictEqual((_a = doc
                .safeFindToVerificationMethodByDidUrl('did:example:bar#01')) === null || _a === void 0 ? void 0 : _a.toJSON(), {
                id: 'did:example:bar#01',
                type: 'some-type',
                controller: 'did:example:bar',
                publicKeyJwk: { kty: 'some-kty' }
            });
        });
        (0, node_test_1.it)('should find safely to undefined if the verification method does not exist', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:bar'
            });
            node_assert_1.default.strictEqual(doc.safeFindToVerificationMethodByDidUrl('did:example:bar#01'), undefined);
        });
        (0, node_test_1.it)('should not find if the verification method does not exist', () => {
            node_assert_1.default.throws(() => {
                const doc = new src_1.DidDocument({
                    id: 'did:example:bar'
                });
                doc.findVerificationMethodByDidUrl('did:example:bar#01');
            }, src_1.DidDocumentError);
        });
    });
    (0, node_test_1.describe)('Finding items in the did Document', () => {
        (0, node_test_1.it)('should find the service by type', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123' }).addService({
                id: 'did:example:123#service-1',
                type: 'some-type',
                serviceEndpoint: 'https://example.org'
            });
            node_assert_1.default.deepStrictEqual(doc.findServiceByType('some-type').toJSON(), {
                id: 'did:example:123#service-1',
                type: 'some-type',
                serviceEndpoint: 'https://example.org'
            });
        });
        (0, node_test_1.it)('should find the service by id', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123' }).addService({
                id: 'did:example:123#service-1',
                type: 'some-type',
                serviceEndpoint: 'https://example.org'
            });
            node_assert_1.default.deepStrictEqual(doc.findServiceById('did:example:123#service-1').toJSON(), {
                id: 'did:example:123#service-1',
                type: 'some-type',
                serviceEndpoint: 'https://example.org'
            });
        });
        (0, node_test_1.it)('should not find the service if the type does not exist', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123' }).addService({
                id: 'did:example:123#service-1',
                type: 'some-type',
                serviceEndpoint: 'https://example.org'
            });
            node_assert_1.default.throws(() => doc.findServiceByType('some-other-type'), src_1.DidDocumentError);
        });
        (0, node_test_1.it)('should not find the service if the id does not exist', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123' }).addService({
                id: 'did:example:123#service-1',
                type: 'some-type',
                serviceEndpoint: 'https://example.org'
            });
            node_assert_1.default.throws(() => doc.findServiceById('did:example:123#service-2'), src_1.DidDocumentError);
        });
        (0, node_test_1.it)('should find the verification method by purpose and type', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123'
            }).addKeyAgreement({
                id: 'did:example:123#key-1',
                type: 'some-type',
                controller: 'did:example:123'
            });
            node_assert_1.default.deepStrictEqual(doc
                .findVerificationMethodByTypeAndPurpose('some-type', 'keyAgreement')
                .toJSON(), {
                id: 'did:example:123#key-1',
                type: 'some-type',
                controller: 'did:example:123'
            });
        });
        (0, node_test_1.it)('should find the verification method by purpose and type with reference', () => {
            const doc = new src_1.DidDocument({ id: 'did:example:123' })
                .addVerificationMethod({
                id: 'did:example:123#key-1',
                type: 'some-type',
                controller: 'did:example:123'
            })
                .addKeyAgreement('did:example:123#key-1');
            node_assert_1.default.deepStrictEqual(doc
                .findVerificationMethodByTypeAndPurpose('some-type', 'keyAgreement')
                .toJSON(), {
                id: 'did:example:123#key-1',
                type: 'some-type',
                controller: 'did:example:123'
            });
        });
        (0, node_test_1.it)('should not find the verification method if the type does not exist', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123'
            }).addVerificationMethod({
                id: 'did:example:123#key-1',
                type: 'some-type',
                controller: 'did:example:123'
            });
            node_assert_1.default.throws(() => doc.findVerificationMethodByTypeAndPurpose('some-other-type', 'verificationMethod'), src_1.DidDocumentError);
        });
        (0, node_test_1.it)('should not find the verification method if the purpose does not match', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123'
            }).addCapabilityDelegation({
                id: 'did:example:123#key-1',
                type: 'some-type',
                controller: 'did:example:123'
            });
            node_assert_1.default.throws(() => doc.findVerificationMethodByTypeAndPurpose('some-type', 'keyAgreement'), src_1.DidDocumentError);
        });
    });
    (0, node_test_1.describe)('validate the registered types for verification methods and services', () => {
        (0, node_test_1.it)('should validate a correct type of a verification method by id', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                verificationMethod: [
                    {
                        id: 'did:example:123#key-1',
                        type: src_1.VerificationMethodTypes.JsonWebKey2020,
                        controller: 'did:example:123'
                    }
                ]
            });
            (0, node_assert_1.default)(doc.isVerificationMethodTypeRegistered('did:example:123#key-1'));
        });
        (0, node_test_1.it)('should validate an custom added type of a verification method by id', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                verificationMethod: [
                    {
                        id: 'did:example:123#key-1',
                        type: 'some-added-type',
                        controller: 'did:example:123'
                    }
                ]
            });
            (0, node_assert_1.default)(doc.isVerificationMethodTypeRegistered('did:example:123#key-1', 'some-added-type'));
        });
        (0, node_test_1.it)('should not validate an incorrect type of a verification method by id', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                verificationMethod: [
                    {
                        id: 'did:example:123#key-1',
                        type: 'some-incorrect-type',
                        controller: 'did:example:123'
                    }
                ]
            });
            (0, node_assert_1.default)(doc.isVerificationMethodTypeRegistered('did:example:123#key-1') === false);
        });
        (0, node_test_1.it)('should validate a correct type of a service by id', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                service: [
                    {
                        id: 'did:example:some:id',
                        type: src_1.ServiceTypes.LinkedDomains,
                        serviceEndpoint: 'https://example.org'
                    }
                ]
            });
            (0, node_assert_1.default)(doc.isServiceTypeRegistered('did:example:some:id'));
        });
        (0, node_test_1.it)('should validate a correct type of a service by id', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                service: [
                    {
                        id: 'did:example:some:id',
                        type: 'some-added-type',
                        serviceEndpoint: 'https://example.org'
                    }
                ]
            });
            (0, node_assert_1.default)(doc.isServiceTypeRegistered('did:example:some:id', 'some-added-type'));
        });
        (0, node_test_1.it)('should not validate an incorrect type of a service by id', () => {
            const doc = new src_1.DidDocument({
                id: 'did:example:123',
                service: [
                    {
                        id: 'did:example:some:id',
                        type: 'some-bad-type',
                        serviceEndpoint: 'https://example.org'
                    }
                ]
            });
            (0, node_assert_1.default)(doc.isServiceTypeRegistered('did:example:some:id') === false);
        });
    });
});
//# sourceMappingURL=didDocument.test.js.map