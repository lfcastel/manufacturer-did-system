import { z } from 'zod';
import { PublicKeyJwk } from '../publicKeyJwk';
import { PublicKeyMultibase } from '../publicKeyMultibase';
import { VerificationMethod } from '../verificationMethod';
import { Did } from '../did';
export declare const verificationMethodSchema: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
    id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    type: z.ZodString;
    publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        kty: z.ZodString;
        use: z.ZodOptional<z.ZodString>;
        crv: z.ZodOptional<z.ZodString>;
        x: z.ZodOptional<z.ZodString>;
        y: z.ZodOptional<z.ZodString>;
        e: z.ZodOptional<z.ZodString>;
        n: z.ZodOptional<z.ZodString>;
        key_ops: z.ZodOptional<z.ZodString>;
        alg: z.ZodOptional<z.ZodString>;
        kid: z.ZodOptional<z.ZodString>;
        d: z.ZodOptional<z.ZodUndefined>;
    }, "strip", z.ZodTypeAny, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }>, z.ZodType<PublicKeyJwk, z.ZodTypeDef, PublicKeyJwk>]>>;
    publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<PublicKeyMultibase, z.ZodTypeDef, PublicKeyMultibase>]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>, {
    id: Did;
    type: string;
    controller: Did;
    publicKeyJwk: PublicKeyJwk | undefined;
    publicKeyMultibase: PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>;
export declare const uniqueVerificationMethodsSchema: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
    id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    type: z.ZodString;
    publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        kty: z.ZodString;
        use: z.ZodOptional<z.ZodString>;
        crv: z.ZodOptional<z.ZodString>;
        x: z.ZodOptional<z.ZodString>;
        y: z.ZodOptional<z.ZodString>;
        e: z.ZodOptional<z.ZodString>;
        n: z.ZodOptional<z.ZodString>;
        key_ops: z.ZodOptional<z.ZodString>;
        alg: z.ZodOptional<z.ZodString>;
        kid: z.ZodOptional<z.ZodString>;
        d: z.ZodOptional<z.ZodUndefined>;
    }, "strip", z.ZodTypeAny, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }>, z.ZodType<PublicKeyJwk, z.ZodTypeDef, PublicKeyJwk>]>>;
    publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<PublicKeyMultibase, z.ZodTypeDef, PublicKeyMultibase>]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>, {
    id: Did;
    type: string;
    controller: Did;
    publicKeyJwk: PublicKeyJwk | undefined;
    publicKeyMultibase: PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>, "many">, {
    id: Did;
    type: string;
    controller: Did;
    publicKeyJwk: PublicKeyJwk | undefined;
    publicKeyMultibase: PublicKeyMultibase | undefined;
}[], ({
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod)[]>;
export declare const stringOrVerificationMethod: z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>, z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
    id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    type: z.ZodString;
    publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        kty: z.ZodString;
        use: z.ZodOptional<z.ZodString>;
        crv: z.ZodOptional<z.ZodString>;
        x: z.ZodOptional<z.ZodString>;
        y: z.ZodOptional<z.ZodString>;
        e: z.ZodOptional<z.ZodString>;
        n: z.ZodOptional<z.ZodString>;
        key_ops: z.ZodOptional<z.ZodString>;
        alg: z.ZodOptional<z.ZodString>;
        kid: z.ZodOptional<z.ZodString>;
        d: z.ZodOptional<z.ZodUndefined>;
    }, "strip", z.ZodTypeAny, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }>, z.ZodType<PublicKeyJwk, z.ZodTypeDef, PublicKeyJwk>]>>;
    publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<PublicKeyMultibase, z.ZodTypeDef, PublicKeyMultibase>]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>, {
    id: Did;
    type: string;
    controller: Did;
    publicKeyJwk: PublicKeyJwk | undefined;
    publicKeyMultibase: PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>]>, Did | VerificationMethod, string | Did | {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>;
export declare const uniqueStringOrVerificationMethodsSchema: (name: string) => z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>, z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
    id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<Did, z.ZodTypeDef, Did>]>, Did, string | Did>;
    type: z.ZodString;
    publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        kty: z.ZodString;
        use: z.ZodOptional<z.ZodString>;
        crv: z.ZodOptional<z.ZodString>;
        x: z.ZodOptional<z.ZodString>;
        y: z.ZodOptional<z.ZodString>;
        e: z.ZodOptional<z.ZodString>;
        n: z.ZodOptional<z.ZodString>;
        key_ops: z.ZodOptional<z.ZodString>;
        alg: z.ZodOptional<z.ZodString>;
        kid: z.ZodOptional<z.ZodString>;
        d: z.ZodOptional<z.ZodUndefined>;
    }, "strip", z.ZodTypeAny, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }, {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    }>, z.ZodType<PublicKeyJwk, z.ZodTypeDef, PublicKeyJwk>]>>;
    publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<PublicKeyMultibase, z.ZodTypeDef, PublicKeyMultibase>]>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
}>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
    type: string;
    id: Did;
    controller: Did;
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>, {
    id: Did;
    type: string;
    controller: Did;
    publicKeyJwk: PublicKeyJwk | undefined;
    publicKeyMultibase: PublicKeyMultibase | undefined;
}, {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>]>, Did | VerificationMethod, string | Did | {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod>, "many">, (Did | VerificationMethod)[], (string | Did | {
    type: string;
    id: (string | Did) & (string | Did | undefined);
    controller: (string | Did) & (string | Did | undefined);
    publicKeyJwk?: {
        kty: string;
        use?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        e?: string | undefined;
        n?: string | undefined;
        key_ops?: string | undefined;
        alg?: string | undefined;
        kid?: string | undefined;
        d?: undefined;
    } | PublicKeyJwk | undefined;
    publicKeyMultibase?: string | PublicKeyMultibase | undefined;
} | VerificationMethod)[]>;
