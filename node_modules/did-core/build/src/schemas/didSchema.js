"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringOrDidUrl = exports.stringOrDid = exports.didSchemaWithouttransformation = exports.didUrlSchemaWithouttransformation = void 0;
const error_1 = require("../error");
const did_1 = require("../did");
const zod_1 = require("zod");
const DID_URL_REGEXP = /^did:[a-z0-9]+(?::[a-z0-9]+(?:[._-][a-z0-9]+)*)*:(?:[a-z0-9]+(?:[._-][a-z0-9]+)*)?(?:\/[^?\s]*)?(?:\?[^#\s]*)?(?:#[^\s]*)?$/i;
const DID_REGEXP = /^did:[a-z0-9]+(?::[a-z0-9]+(?:[._-][a-z0-9]+)*)*(?:#[^s]*)?$/i;
exports.didUrlSchemaWithouttransformation = zod_1.z
    .string()
    .regex(DID_URL_REGEXP, { message: 'Invalid did url syntax' });
exports.didSchemaWithouttransformation = zod_1.z
    .string()
    .regex(DID_REGEXP, { message: 'Invalid did syntax' });
exports.stringOrDid = zod_1.z
    .union([
    exports.didSchemaWithouttransformation,
    zod_1.z.custom((did) => did instanceof did_1.Did)
])
    .transform((did) => {
    if (typeof did === 'string') {
        return new did_1.Did(did);
    }
    else if (did instanceof did_1.Did) {
        return did;
    }
    else {
        throw new error_1.DidError(`id must be of type 'string' or an instance of 'Did'`);
    }
});
exports.stringOrDidUrl = zod_1.z
    .union([
    exports.didUrlSchemaWithouttransformation,
    zod_1.z.custom((did) => did instanceof did_1.Did)
])
    .transform((did) => {
    if (typeof did === 'string') {
        return new did_1.Did(did);
    }
    else if (did instanceof did_1.Did) {
        return did;
    }
    else {
        throw new error_1.DidError(`id must be of type 'string' or an instance of 'Did'`);
    }
});
//# sourceMappingURL=didSchema.js.map