"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.didDocumentSchema = void 0;
const zod_1 = require("zod");
const didSchema_1 = require("./didSchema");
const verificationMethodSchema_1 = require("./verificationMethodSchema");
const serviceSchema_1 = require("./serviceSchema");
const service_1 = require("../service");
const verificationMethod_1 = require("../verificationMethod");
exports.didDocumentSchema = zod_1.z
    .object({
    id: didSchema_1.stringOrDid,
    alsoKnownAs: zod_1.z.optional(zod_1.z.array(zod_1.z.string().url())),
    controller: zod_1.z.optional(zod_1.z.union([didSchema_1.stringOrDid, zod_1.z.array(didSchema_1.stringOrDid)])),
    verificationMethod: zod_1.z.optional(zod_1.z.array(verificationMethodSchema_1.verificationMethodSchema)),
    authentication: zod_1.z.optional((0, verificationMethodSchema_1.uniqueStringOrVerificationMethodsSchema)('authentication')),
    assertionMethod: zod_1.z.optional((0, verificationMethodSchema_1.uniqueStringOrVerificationMethodsSchema)('assertionMethod')),
    keyAgreement: zod_1.z.optional((0, verificationMethodSchema_1.uniqueStringOrVerificationMethodsSchema)('keyAgreement')),
    capabilityInvocation: zod_1.z.optional((0, verificationMethodSchema_1.uniqueStringOrVerificationMethodsSchema)('capabilityInvocation')),
    capabilityDelegation: zod_1.z.optional((0, verificationMethodSchema_1.uniqueStringOrVerificationMethodsSchema)('capabilityInvocation')),
    service: zod_1.z.optional(serviceSchema_1.uniqueServicesSchema)
})
    .transform((didDocument) => {
    var _a, _b;
    return (Object.assign(Object.assign({}, didDocument), { service: (_a = didDocument.service) === null || _a === void 0 ? void 0 : _a.map((s) => new service_1.Service(s)), verificationMethod: (_b = didDocument.verificationMethod) === null || _b === void 0 ? void 0 : _b.map((v) => new verificationMethod_1.VerificationMethod(v)) }));
});
//# sourceMappingURL=didDocumentSchema.js.map