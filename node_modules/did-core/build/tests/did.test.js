"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const node_assert_1 = __importDefault(require("node:assert"));
const node_test_1 = require("node:test");
const dids_1 = require("./fixtures/dids");
const utils_1 = require("./utils");
(0, node_test_1.describe)('Did', (_) => {
    (0, node_test_1.describe)('Creation', () => {
        (0, node_test_1.it)('should create a new did', () => {
            const didUrl = 'did:key:abc';
            const did = new src_1.Did(didUrl);
            node_assert_1.default.strictEqual(did.did, didUrl);
        });
        (0, node_test_1.it)('should create a new did from a did-url', () => {
            const didUrl = 'did:key:abc/some-path?versionId=1#key-1';
            const did = new src_1.Did(didUrl);
            node_assert_1.default.deepStrictEqual(did.didUrl, didUrl);
        });
        (0, node_test_1.it)('should create a new did via the builder pattern', () => {
            const did = new src_1.Did('did:key:abc')
                .withPath('some-path')
                .withQuery({ versionId: '1' })
                .withFragment('key-1');
            node_assert_1.default.deepStrictEqual(did.didUrl, 'did:key:abc/some-path?versionId=1#key-1');
        });
    });
    (0, node_test_1.describe)('Validation', () => {
        (0, node_test_1.describe)('Validate did', () => {
            Object.keys(dids_1.DIDS).forEach(utils_1.createDidValidationTest);
        });
        (0, node_test_1.describe)('Validate whether did is url', () => {
            Object.entries(dids_1.DIDS).forEach(([did, expected]) => (0, utils_1.createDidIsDidUrlValidationTest)(did, Boolean(expected.urlParts.path ||
                expected.urlParts.query ||
                expected.urlParts.fragment ||
                expected.urlParts.parameters)));
        });
    });
    (0, node_test_1.describe)('Extraction', () => {
        (0, node_test_1.describe)('Extract did parts', () => {
            Object.entries(dids_1.DIDS).forEach(([did, expected]) => (0, utils_1.createDidExtractPartsTest)(did, expected.parts));
        });
        (0, node_test_1.describe)('Extract did url parts', () => {
            Object.entries(dids_1.DIDS).forEach(([did, expected]) => (0, utils_1.createDidExtractUrlPartsTest)(did, expected.urlParts));
        });
    });
    (0, node_test_1.describe)('Modify url parts', () => {
        const baseDid = 'did:key:abc';
        (0, node_test_1.describe)('Path', () => {
            (0, node_test_1.it)('should add a new path (withPath)', () => {
                const did = new src_1.Did(baseDid);
                did.withPath('test');
                node_assert_1.default.strictEqual(did.didUrlParts.path, 'test');
            });
            (0, node_test_1.it)('should add a new path (addPath)', () => {
                const did = new src_1.Did(baseDid);
                did.addPath('test');
                node_assert_1.default.strictEqual(did.didUrlParts.path, 'test');
            });
            (0, node_test_1.it)('should append a new path', () => {
                const did = new src_1.Did(baseDid);
                did.addPath('test').addPath('testTwo');
                node_assert_1.default.strictEqual(did.didUrlParts.path, 'test/testTwo');
            });
            (0, node_test_1.it)('should remove the path', () => {
                const did = new src_1.Did(baseDid);
                did.addPath('test').removePath();
                node_assert_1.default.strictEqual(did.didUrlParts.path, undefined);
            });
        });
        (0, node_test_1.describe)('Query', () => {
            (0, node_test_1.it)('should add a new query (withQuery)', () => {
                const did = new src_1.Did(baseDid);
                did.withQuery({ a: 'b' });
                node_assert_1.default.deepStrictEqual(did.didUrlParts.query, { a: 'b' });
            });
            (0, node_test_1.it)('should add a new query (addQuery)', () => {
                const did = new src_1.Did(baseDid);
                did.addQuery({ a: 'b' });
                node_assert_1.default.deepStrictEqual(did.didUrlParts.query, { a: 'b' });
            });
            (0, node_test_1.it)('should append a new query', () => {
                const did = new src_1.Did(baseDid);
                did.addQuery({ a: 'b' }).addQuery({ c: 'd' });
                node_assert_1.default.deepStrictEqual(did.didUrlParts.query, {
                    a: 'b',
                    c: 'd'
                });
            });
            (0, node_test_1.it)('should remove the query', () => {
                const did = new src_1.Did(baseDid);
                did.addQuery({ a: 'b' }).removeQuery();
                node_assert_1.default.strictEqual(did.didUrlParts.query, undefined);
            });
        });
        (0, node_test_1.describe)('Fragment', () => {
            (0, node_test_1.it)('should add a new fragment', () => {
                const did = new src_1.Did(baseDid);
                did.withFragment('a');
                node_assert_1.default.strictEqual(did.didUrlParts.fragment, 'a');
            });
            (0, node_test_1.it)('should remove the fragment', () => {
                const did = new src_1.Did(baseDid);
                did.withFragment('a').removeFragment();
                node_assert_1.default.strictEqual(did.didUrlParts.fragment, undefined);
            });
        });
        (0, node_test_1.describe)('Parameters', () => {
            (0, node_test_1.it)('should add a new parameter', () => {
                const did = new src_1.Did(baseDid);
                did.addParameterKey('a').addQuery({ a: 'b' });
                node_assert_1.default.deepStrictEqual(did.didUrlParts.parameters, { a: 'b' });
            });
        });
    });
});
//# sourceMappingURL=did.test.js.map