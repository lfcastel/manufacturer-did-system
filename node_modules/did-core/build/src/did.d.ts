import { z } from 'zod';
import { stringOrDid, stringOrDidUrl } from './schemas';
export declare const PREFIX_PATH = "/";
export declare const PREFIX_QUERY = "?";
export declare const PREFIX_FRAGMENT = "#";
export type DidParts = {
    scheme: string;
    method: string;
    namespaces?: Array<string>;
    identifier: string;
};
export type DidUrlParts = {
    path?: string;
    query?: Record<string, string>;
    fragment?: string;
    parameters?: Record<string, string>;
};
export declare class Did {
    did: string;
    private path?;
    private query?;
    private fragment?;
    private parameters?;
    private parameterKeys;
    constructor(did: string, parameterKeys?: Array<string>);
    isDidUrl(): boolean;
    static validateDid(did: z.input<typeof stringOrDid>): boolean;
    static validateDidUrl(did: z.input<typeof stringOrDidUrl>): boolean;
    validate(): boolean;
    get didUrl(): string;
    withPath(path: string): this;
    addPath(path: string): this;
    removePath(): this;
    withQuery(query: Record<string, string>): this;
    addQuery(query: Record<string, string>): this;
    removeQuery(): this;
    withFragment(fragment: string): this;
    removeFragment(): this;
    get didParts(): DidParts;
    get didUrlParts(): DidUrlParts;
    private stripOptionalPrefix;
    private addPrefixIfNotSupplied;
    addParameterKey(key: string | Array<string>): this;
    toString(): string;
    toJSON(): string;
}
