import { z } from 'zod';
import { Did } from './did';
import { Service, ServiceOptions } from './service';
import { VerificationMethod, VerificationMethodOptions } from './verificationMethod';
import { didDocumentSchema, stringOrDid } from './schemas';
import { MakePropertyRequired, Modify } from './types';
type DidOrVerificationMethodArray = Array<VerificationMethodOrDidOrString>;
type VerificationMethodOrDidOrString = VerificationMethod | VerificationMethodOptions | Did | string;
export type DidDocumentOptions<T extends Record<string, unknown> = {}> = Modify<z.input<typeof didDocumentSchema>, {
    verificationMethod?: Array<VerificationMethodOptions>;
    authentication?: DidOrVerificationMethodArray;
    assertionMethod?: DidOrVerificationMethodArray;
    keyAgreement?: DidOrVerificationMethodArray;
    capabilityInvocation?: DidOrVerificationMethodArray;
    capabilityDelegation?: DidOrVerificationMethodArray;
    service?: Array<ServiceOptions | Service>;
}> & Record<string, unknown> & T;
type ReturnBuilderWithAlsoKnownAs<T extends DidDocument> = MakePropertyRequired<T, 'alsoKnownAs'>;
type ReturnBuilderWithController<T extends DidDocument> = MakePropertyRequired<T, 'controller'>;
type ReturnBuilderWithVerificationMethod<T extends DidDocument> = MakePropertyRequired<T, 'verificationMethod'>;
type ReturnBuilderWithAuthentication<T extends DidDocument> = MakePropertyRequired<T, 'authentication'>;
type ReturnBuilderWithAssertionMethod<T extends DidDocument> = MakePropertyRequired<T, 'assertionMethod'>;
type ReturnBuilderWithKeyAgreementMethod<T extends DidDocument> = MakePropertyRequired<T, 'keyAgreement'>;
type ReturnBuilderWithCapabilityInvocation<T extends DidDocument> = MakePropertyRequired<T, 'capabilityInvocation'>;
type ReturnBuilderWithCapabilityDelegation<T extends DidDocument> = MakePropertyRequired<T, 'capabilityDelegation'>;
type ReturnBuilderWithService<T extends DidDocument> = MakePropertyRequired<T, 'service'>;
export declare class DidDocument {
    fullDocument: DidDocumentOptions;
    id: Did;
    alsoKnownAs?: Array<string>;
    controller?: Did | Array<Did>;
    verificationMethod?: Array<VerificationMethod>;
    authentication?: Array<VerificationMethod | Did>;
    assertionMethod?: Array<VerificationMethod | Did>;
    keyAgreement?: Array<VerificationMethod | Did>;
    capabilityInvocation?: Array<VerificationMethod | Did>;
    capabilityDelegation?: Array<VerificationMethod | Did>;
    service?: Array<Service>;
    constructor(options: DidDocumentOptions);
    findVerificationMethodByDidUrl(didUrl: z.input<typeof stringOrDid>): VerificationMethod;
    safeFindToVerificationMethodByDidUrl(didUrl: z.input<typeof stringOrDid>): VerificationMethod | undefined;
    addAlsoKnownAs(alsoKnownAs: string): ReturnBuilderWithAlsoKnownAs<this>;
    addController(controller: string | Did, asArray?: boolean): ReturnBuilderWithController<this>;
    addVerificationMethod(verificationMethod: VerificationMethodOptions): ReturnBuilderWithVerificationMethod<this>;
    addAuthentication(verificationMethodOrDidOrString: VerificationMethodOrDidOrString): ReturnBuilderWithAuthentication<this>;
    addAuthenticationUnsafe(verificationMethodOrDidOrString: VerificationMethodOrDidOrString): ReturnBuilderWithAuthentication<this>;
    addKeyAgreement(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithKeyAgreementMethod<this>;
    addKeyAgreementUnsafe(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithKeyAgreementMethod<this>;
    addAssertionMethod(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithAssertionMethod<this>;
    addAssertionMethodUnsafe(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithAssertionMethod<this>;
    addCapabilityDelegation(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithCapabilityDelegation<this>;
    addCapabilityDelegationUnsafe(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithCapabilityDelegation<this>;
    addCapabilityInvocation(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithCapabilityInvocation<this>;
    addCapabilityInvocationUnsafe(verificationMethodOrStringOrDid: VerificationMethodOrDidOrString): ReturnBuilderWithCapabilityInvocation<this>;
    addService(service: ServiceOptions): ReturnBuilderWithService<this>;
    private addVerificationMethodOrDidOrString;
    findServiceByType(type: string): Service;
    safeFindServiceByType(type: string): Service | undefined;
    findServiceById(id: string): Service;
    safeFindServiceById(id: string): Service | undefined;
    findVerificationMethodByTypeAndPurpose(type: string, purpose?: 'authentication' | 'keyAgreement' | 'assertionMethod' | 'capabilityInvocation' | 'capabilityDelegation' | 'verificationMethod'): VerificationMethod;
    findVerificationMethodByDidUrlAndPurpose(did: Did | string, purpose?: 'authentication' | 'keyAgreement' | 'assertionMethod' | 'capabilityInvocation' | 'capabilityDelegation' | 'verificationMethod'): VerificationMethod;
    safeFindVerificationMethodByDidUrlAndPurpose(did: Did | string, purpose?: 'authentication' | 'keyAgreement' | 'assertionMethod' | 'capabilityInvocation' | 'capabilityDelegation' | 'verificationMethod'): VerificationMethod | undefined;
    safeFindVerificationMethodByTypeAndPurpose(type: string, purpose?: 'authentication' | 'keyAgreement' | 'assertionMethod' | 'capabilityInvocation' | 'capabilityDelegation' | 'verificationMethod'): VerificationMethod | undefined;
    isVerificationMethodTypeRegistered(id: Did | string, additionalAcceptedTypes?: string | Array<string>): boolean;
    isServiceTypeRegistered(id: string, additionalAcceptedTypes?: string | Array<string>): boolean;
    toJSON(omitKeys?: Array<string>): Record<string, unknown>;
}
export {};
