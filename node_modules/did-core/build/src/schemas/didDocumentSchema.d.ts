import { z } from 'zod';
import { Service } from '../service';
import { VerificationMethod } from '../verificationMethod';
export declare const didDocumentSchema: z.ZodEffects<z.ZodObject<{
    id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
    alsoKnownAs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    controller: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>, z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>, "many">]>>;
    verificationMethod: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        type: z.ZodString;
        publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            kty: z.ZodString;
            use: z.ZodOptional<z.ZodString>;
            crv: z.ZodOptional<z.ZodString>;
            x: z.ZodOptional<z.ZodString>;
            y: z.ZodOptional<z.ZodString>;
            e: z.ZodOptional<z.ZodString>;
            n: z.ZodOptional<z.ZodString>;
            key_ops: z.ZodOptional<z.ZodString>;
            alg: z.ZodOptional<z.ZodString>;
            kid: z.ZodOptional<z.ZodString>;
            d: z.ZodOptional<z.ZodUndefined>;
        }, "strip", z.ZodTypeAny, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }>, z.ZodType<import("..").PublicKeyJwk, z.ZodTypeDef, import("..").PublicKeyJwk>]>>;
        publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<import("..").PublicKeyMultibase, z.ZodTypeDef, import("..").PublicKeyMultibase>]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, {
        id: import("..").Did;
        type: string;
        controller: import("..").Did;
        publicKeyJwk: import("..").PublicKeyJwk | undefined;
        publicKeyMultibase: import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, "many">>;
    authentication: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>, z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        type: z.ZodString;
        publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            kty: z.ZodString;
            use: z.ZodOptional<z.ZodString>;
            crv: z.ZodOptional<z.ZodString>;
            x: z.ZodOptional<z.ZodString>;
            y: z.ZodOptional<z.ZodString>;
            e: z.ZodOptional<z.ZodString>;
            n: z.ZodOptional<z.ZodString>;
            key_ops: z.ZodOptional<z.ZodString>;
            alg: z.ZodOptional<z.ZodString>;
            kid: z.ZodOptional<z.ZodString>;
            d: z.ZodOptional<z.ZodUndefined>;
        }, "strip", z.ZodTypeAny, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }>, z.ZodType<import("..").PublicKeyJwk, z.ZodTypeDef, import("..").PublicKeyJwk>]>>;
        publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<import("..").PublicKeyMultibase, z.ZodTypeDef, import("..").PublicKeyMultibase>]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, {
        id: import("..").Did;
        type: string;
        controller: import("..").Did;
        publicKeyJwk: import("..").PublicKeyJwk | undefined;
        publicKeyMultibase: import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>]>, import("..").Did | VerificationMethod, string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, "many">, (import("..").Did | VerificationMethod)[], (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[]>>;
    assertionMethod: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>, z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        type: z.ZodString;
        publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            kty: z.ZodString;
            use: z.ZodOptional<z.ZodString>;
            crv: z.ZodOptional<z.ZodString>;
            x: z.ZodOptional<z.ZodString>;
            y: z.ZodOptional<z.ZodString>;
            e: z.ZodOptional<z.ZodString>;
            n: z.ZodOptional<z.ZodString>;
            key_ops: z.ZodOptional<z.ZodString>;
            alg: z.ZodOptional<z.ZodString>;
            kid: z.ZodOptional<z.ZodString>;
            d: z.ZodOptional<z.ZodUndefined>;
        }, "strip", z.ZodTypeAny, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }>, z.ZodType<import("..").PublicKeyJwk, z.ZodTypeDef, import("..").PublicKeyJwk>]>>;
        publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<import("..").PublicKeyMultibase, z.ZodTypeDef, import("..").PublicKeyMultibase>]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, {
        id: import("..").Did;
        type: string;
        controller: import("..").Did;
        publicKeyJwk: import("..").PublicKeyJwk | undefined;
        publicKeyMultibase: import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>]>, import("..").Did | VerificationMethod, string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, "many">, (import("..").Did | VerificationMethod)[], (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[]>>;
    keyAgreement: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>, z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        type: z.ZodString;
        publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            kty: z.ZodString;
            use: z.ZodOptional<z.ZodString>;
            crv: z.ZodOptional<z.ZodString>;
            x: z.ZodOptional<z.ZodString>;
            y: z.ZodOptional<z.ZodString>;
            e: z.ZodOptional<z.ZodString>;
            n: z.ZodOptional<z.ZodString>;
            key_ops: z.ZodOptional<z.ZodString>;
            alg: z.ZodOptional<z.ZodString>;
            kid: z.ZodOptional<z.ZodString>;
            d: z.ZodOptional<z.ZodUndefined>;
        }, "strip", z.ZodTypeAny, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }>, z.ZodType<import("..").PublicKeyJwk, z.ZodTypeDef, import("..").PublicKeyJwk>]>>;
        publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<import("..").PublicKeyMultibase, z.ZodTypeDef, import("..").PublicKeyMultibase>]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, {
        id: import("..").Did;
        type: string;
        controller: import("..").Did;
        publicKeyJwk: import("..").PublicKeyJwk | undefined;
        publicKeyMultibase: import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>]>, import("..").Did | VerificationMethod, string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, "many">, (import("..").Did | VerificationMethod)[], (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[]>>;
    capabilityInvocation: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>, z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        type: z.ZodString;
        publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            kty: z.ZodString;
            use: z.ZodOptional<z.ZodString>;
            crv: z.ZodOptional<z.ZodString>;
            x: z.ZodOptional<z.ZodString>;
            y: z.ZodOptional<z.ZodString>;
            e: z.ZodOptional<z.ZodString>;
            n: z.ZodOptional<z.ZodString>;
            key_ops: z.ZodOptional<z.ZodString>;
            alg: z.ZodOptional<z.ZodString>;
            kid: z.ZodOptional<z.ZodString>;
            d: z.ZodOptional<z.ZodUndefined>;
        }, "strip", z.ZodTypeAny, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }>, z.ZodType<import("..").PublicKeyJwk, z.ZodTypeDef, import("..").PublicKeyJwk>]>>;
        publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<import("..").PublicKeyMultibase, z.ZodTypeDef, import("..").PublicKeyMultibase>]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, {
        id: import("..").Did;
        type: string;
        controller: import("..").Did;
        publicKeyJwk: import("..").PublicKeyJwk | undefined;
        publicKeyMultibase: import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>]>, import("..").Did | VerificationMethod, string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, "many">, (import("..").Did | VerificationMethod)[], (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[]>>;
    capabilityDelegation: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>, z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        id: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        controller: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<import("..").Did, z.ZodTypeDef, import("..").Did>]>, import("..").Did, string | import("..").Did>;
        type: z.ZodString;
        publicKeyJwk: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            kty: z.ZodString;
            use: z.ZodOptional<z.ZodString>;
            crv: z.ZodOptional<z.ZodString>;
            x: z.ZodOptional<z.ZodString>;
            y: z.ZodOptional<z.ZodString>;
            e: z.ZodOptional<z.ZodString>;
            n: z.ZodOptional<z.ZodString>;
            key_ops: z.ZodOptional<z.ZodString>;
            alg: z.ZodOptional<z.ZodString>;
            kid: z.ZodOptional<z.ZodString>;
            d: z.ZodOptional<z.ZodUndefined>;
        }, "strip", z.ZodTypeAny, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }, {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        }>, z.ZodType<import("..").PublicKeyJwk, z.ZodTypeDef, import("..").PublicKeyJwk>]>>;
        publicKeyMultibase: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<import("..").PublicKeyMultibase, z.ZodTypeDef, import("..").PublicKeyMultibase>]>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    }>, z.ZodType<VerificationMethod, z.ZodTypeDef, VerificationMethod>]>, {
        type: string;
        id: import("..").Did;
        controller: import("..").Did;
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, {
        id: import("..").Did;
        type: string;
        controller: import("..").Did;
        publicKeyJwk: import("..").PublicKeyJwk | undefined;
        publicKeyMultibase: import("..").PublicKeyMultibase | undefined;
    }, {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>]>, import("..").Did | VerificationMethod, string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod>, "many">, (import("..").Did | VerificationMethod)[], (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[]>>;
    service: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        serviceEndpoint: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>;
    }, "strip", z.ZodTypeAny, {
        type: (string | string[]) & (string | string[] | undefined);
        id: string;
        serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
    }, {
        type: (string | string[]) & (string | string[] | undefined);
        id: string;
        serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
    }>, "many">, {
        type: (string | string[]) & (string | string[] | undefined);
        id: string;
        serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
    }[], {
        type: (string | string[]) & (string | string[] | undefined);
        id: string;
        serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
    }[]>>;
}, "strip", z.ZodTypeAny, {
    id: import("..").Did;
    alsoKnownAs?: string[] | undefined;
    controller?: import("..").Did | import("..").Did[] | undefined;
    verificationMethod?: {
        id: import("..").Did;
        type: string;
        controller: import("..").Did;
        publicKeyJwk: import("..").PublicKeyJwk | undefined;
        publicKeyMultibase: import("..").PublicKeyMultibase | undefined;
    }[] | undefined;
    authentication?: (import("..").Did | VerificationMethod)[] | undefined;
    assertionMethod?: (import("..").Did | VerificationMethod)[] | undefined;
    keyAgreement?: (import("..").Did | VerificationMethod)[] | undefined;
    capabilityInvocation?: (import("..").Did | VerificationMethod)[] | undefined;
    capabilityDelegation?: (import("..").Did | VerificationMethod)[] | undefined;
    service?: {
        type: (string | string[]) & (string | string[] | undefined);
        id: string;
        serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
    }[] | undefined;
}, {
    id: (string | import("..").Did) & (string | import("..").Did | undefined);
    alsoKnownAs?: string[] | undefined;
    controller?: string | import("..").Did | (string | import("..").Did)[] | undefined;
    verificationMethod?: ({
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    authentication?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    assertionMethod?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    keyAgreement?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    capabilityInvocation?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    capabilityDelegation?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    service?: {
        type: (string | string[]) & (string | string[] | undefined);
        id: string;
        serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
    }[] | undefined;
}>, {
    service: Service[] | undefined;
    verificationMethod: VerificationMethod[] | undefined;
    id: import("..").Did;
    alsoKnownAs?: string[] | undefined;
    controller?: import("..").Did | import("..").Did[] | undefined;
    authentication?: (import("..").Did | VerificationMethod)[] | undefined;
    assertionMethod?: (import("..").Did | VerificationMethod)[] | undefined;
    keyAgreement?: (import("..").Did | VerificationMethod)[] | undefined;
    capabilityInvocation?: (import("..").Did | VerificationMethod)[] | undefined;
    capabilityDelegation?: (import("..").Did | VerificationMethod)[] | undefined;
}, {
    id: (string | import("..").Did) & (string | import("..").Did | undefined);
    alsoKnownAs?: string[] | undefined;
    controller?: string | import("..").Did | (string | import("..").Did)[] | undefined;
    verificationMethod?: ({
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    authentication?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    assertionMethod?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    keyAgreement?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    capabilityInvocation?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    capabilityDelegation?: (string | import("..").Did | {
        type: string;
        id: (string | import("..").Did) & (string | import("..").Did | undefined);
        controller: (string | import("..").Did) & (string | import("..").Did | undefined);
        publicKeyJwk?: {
            kty: string;
            use?: string | undefined;
            crv?: string | undefined;
            x?: string | undefined;
            y?: string | undefined;
            e?: string | undefined;
            n?: string | undefined;
            key_ops?: string | undefined;
            alg?: string | undefined;
            kid?: string | undefined;
            d?: undefined;
        } | import("..").PublicKeyJwk | undefined;
        publicKeyMultibase?: string | import("..").PublicKeyMultibase | undefined;
    } | VerificationMethod)[] | undefined;
    service?: {
        type: (string | string[]) & (string | string[] | undefined);
        id: string;
        serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
    }[] | undefined;
}>;
