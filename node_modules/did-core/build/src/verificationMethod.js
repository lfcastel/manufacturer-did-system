"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificationMethod = void 0;
const schemas_1 = require("./schemas");
const verificationMethodTypes_1 = require("./verificationMethodTypes");
class VerificationMethod {
    constructor(options) {
        this.fullVerificationMethod = options;
        const { id, controller, type, publicKeyJwk, publicKeyMultibase } = schemas_1.verificationMethodSchema.parse(options);
        this.id = id;
        this.controller = controller;
        this.type = type;
        this.publicKeyJwk = publicKeyJwk;
        this.publicKeyMultibase = publicKeyMultibase;
    }
    /**
     * Checks whether the verification method type is registered inside the @{link https://www.w3.org/TR/did-spec-registries/#verification-method-types | verification method types}
     *
     */
    isTypeInDidSpecRegistry(additionalAcceptedTypes = []) {
        const additionalAcceptedTypesArray = typeof additionalAcceptedTypes === 'string'
            ? [additionalAcceptedTypes]
            : additionalAcceptedTypes;
        const allTypes = Object.values(verificationMethodTypes_1.VerificationMethodTypes).concat(additionalAcceptedTypesArray);
        return allTypes.includes(this.type);
    }
    toJSON() {
        var _a, _b;
        const mappedRest = {
            id: this.id.toJSON(),
            controller: this.controller.toJSON(),
            type: this.type,
            publicKeyJwk: (_a = this.publicKeyJwk) === null || _a === void 0 ? void 0 : _a.toJSON(),
            publicKeyMultibase: (_b = this.publicKeyMultibase) === null || _b === void 0 ? void 0 : _b.toJSON()
        };
        const cleanedRest = Object.fromEntries(Object.entries(mappedRest).filter(([_, value]) => value !== undefined));
        return cleanedRest;
    }
}
exports.VerificationMethod = VerificationMethod;
//# sourceMappingURL=verificationMethod.js.map