import { z } from 'zod';
export declare const serviceSchema: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    serviceEndpoint: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>;
}, "strip", z.ZodTypeAny, {
    type: (string | string[]) & (string | string[] | undefined);
    id: string;
    serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
}, {
    type: (string | string[]) & (string | string[] | undefined);
    id: string;
    serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
}>;
export declare const uniqueServicesSchema: z.ZodEffects<z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    type: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    serviceEndpoint: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>;
}, "strip", z.ZodTypeAny, {
    type: (string | string[]) & (string | string[] | undefined);
    id: string;
    serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
}, {
    type: (string | string[]) & (string | string[] | undefined);
    id: string;
    serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
}>, "many">, {
    type: (string | string[]) & (string | string[] | undefined);
    id: string;
    serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
}[], {
    type: (string | string[]) & (string | string[] | undefined);
    id: string;
    serviceEndpoint: (string | string[] | {}) & (string | string[] | {} | undefined);
}[]>;
